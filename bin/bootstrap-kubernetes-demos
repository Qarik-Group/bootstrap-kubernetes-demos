#!/bin/bash

set -eu

cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

mkdir -p state/systems
touch state/systems/zzz-ignoreme

usage() {
    echo "Bootstrap Kubernetes and/or subsystems for demonstrations:"
    echo "  up"
    echo "     [--minikube|--local]   -- bootstrap Minikube"
    echo "     [--gke|--google]       -- bootstrap new Google GKE cluster"
    echo "     [--az|--azure]         -- bootstrap new Azure AKE cluster"
    echo "     [--do|--digitalocean]  -- bootstrap new Digital Ocean cluster"
    echo ""
    echo "     [--ingress|--nginx-ingress] -- deploys Nginx Ingress"
    echo "     [--cert-manager]       -- deploys cert-manager"
    echo "     [--k-rail|--krail]     -- deploys k-rail to enforce policies for end users"
    echo "     [--helm|--tiller]      -- deploys secure Helm Tiller (deprecated)"
    echo ""
    echo "     [--cf|--kubecf|--eirini] -- deploys Cloud Foundry/Eirini"
    echo "     [--cf-operator]        -- deploys only CF Operator"
    echo "     [--kpack]              -- deploys kpack to build images with buildpacks"
    echo "     [--tekton]             -- deploys Tekton CD"
    echo "     [--knative]            -- deploys Knative Serving/Eventing/Istio"
    echo "     [--rancher]            -- deploys Rancher"
    echo "     [--rio]                -- deploys Rancher Rio"
    # echo "     [--knative-addr-name name] -- map GCP address to ingress gateway"
    echo "     [--kubeapp]                -- deploys Kubeapps"
    echo "     [--service-catalog|--sc]   -- deploys Helm/Service Catalog"
    echo "     [--cf-broker]              -- deploys Helm/Service Catalog/Cloud Foundry Service Broker"
    echo ""
    echo "  down                        -- destroys cluster, if originally bootstrapped"
    echo "  clean                       -- cleans up cached state files"
}

# Ordered list of available systems
# TODO: would be nice to discover available systems from bin/bootstrap-system-* and discover dependencies
_available_systems() {
  echo "
    nginx-ingress
    cert-manager
    k-rail
    helm
    kubeapps
    servicecatalog cf-broker
    cf-operator kubecf
    kpack tekton knative
    rio rancher
  "
}

# Ordered list of requested systems
_requested_systems() {
  for available in $(_available_systems); do
    for requested in $(find state/systems/* -print | xargs -L1 basename); do
      [[ "$available" == "$requested" && $(cat "state/systems/${requested}") == "1" ]] && { echo "$requested"; }
    done
  done
}

failfast() {
  set +e
  errors_file=$(mktemp)
  trap "rm -f ${errors_file}" EXIT

  [[ "$(command -v kubectl)X" == "X" ]] && { echo "ERROR: missing 'kubectl' CLI from \$PATH" >> $errors_file; }

  [[ -f state/infrastructure ]] && { bin/bootstrap-infrastructure-"$(cat state/infrastructure)" failfast "$errors_file"; }

  for system in $(_requested_systems); do
    "bin/bootstrap-system-$system" failfast "$errors_file"
  done

  cat "${errors_file}"
  [[ -n "$(cat "${errors_file}")" ]] && { exit 1; }
  set -e

  # migrate state files after renaming/upgrades
  [[ -f state/systems/scf ]] && { mv state/systems/scf state/systems/kubecf; }
  printf ""
}

up() {
  failfast

  [[ -f state/infrastructure ]] && { bin/bootstrap-infrastructure-"$(cat state/infrastructure)" up; }

  [[ -z "$(_requested_systems)" ]] && { echo "No systems selected."; }
  for system in $(_requested_systems); do
    if [[ -z "${DRY_RUN:-}" ]]; then
      "bin/bootstrap-system-$system" up
    else
      echo "---> bootstrap-system-$system up"
    fi
  done
}

down() {
  [[ -f state/infrastructure ]] && { bin/bootstrap-infrastructure-"$(cat state/infrastructure)" down; }
}

clean() {
  down
  rm -rf state
}

case "${1:-usage}" in
  up)
    mkdir -p state/systems state/configuration/
    shift
    while [[ $# -gt 0 ]]; do
      case "${1:-}" in
        --local|--minikube)
          echo "minikube" > state/infrastructure
          ;;
        --gke|--google)
          echo "google" > state/infrastructure
          ;;
        --az|--azure)
          echo "azure" > state/infrastructure
          ;;
        --do|--digitalocean)
          echo "digitalocean" > state/infrastructure
          ;;

        --ingress|--nginx-ingress)
          echo 1 > state/systems/helm
          echo 1 > state/systems/nginx-ingress
          ;;
        --kubecf|--cf|--scf|--eirini)
          echo 1 > state/systems/helm
          echo 1 > state/systems/cf-operator
          echo 1 > state/systems/kubecf
          ;;
        --cf-operator)
          echo 1 > state/systems/helm
          echo 1 > state/systems/cf-operator
          ;;
        --cert-manager)
          echo 1 > state/systems/cert-manager
          ;;
        --k-rail|--krail)
          echo 1 > state/systems/k-rail
          ;;
        --kpack)
          echo 1 > state/systems/kpack
          ;;
        --tekton)
          echo 1 > state/systems/tekton
          ;;
        --knative)
          echo 1 > state/systems/knative
          ;;
        --rancher)
          echo 1 > state/systems/helm
          echo 1 > state/systems/cert-manager
          echo 1 > state/systems/rancher
          ;;
        --rio)
          echo 1 > state/systems/rio
          ;;
        # --knative-addr-name)
        #   shift
        #   echo "$1" > state/configuration/knative-knative_addr_name
        #   ;;
        --helm|--tiller)
          echo 1 > state/systems/helm
          ;;
        --service-catalog|--sc)
          echo 1 > state/systems/helm
          echo 1 > state/systems/servicecatalog
          ;;
        --cf-broker)
          echo 1 > state/systems/helm
          echo 1 > state/systems/servicecatalog
          echo 1 > state/systems/cf-broker
          ;;
        --kubeapps)
          echo 1 > state/systems/helm
          echo 1 > state/systems/kubeapps
          ;;
        --credhub-store)
          shift
          echo "$1" > state/configuration/credhub-base-path
          ;;
      esac
      shift
    done

    up
    ;;

  clean)
    shift
    clean
    ;;

  failfast)
    shift
    failfast
    ;;

  down)
    shift
    down
    ;;

  *)
    usage
    exit 1
    ;;
esac
