#!/bin/bash

set -eu

cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

mkdir -p state/systems
touch state/systems/ignoreme

usage() {
    echo "Bootstrap Kubernetes and/or subsystems for demonstrations:"
    echo "  up"
    echo "     [--gke|--google]       -- bootstrap new GKE cluster"
    echo "     [--credhub-store path] -- store GKE cluster into Credhub path/to/secrets"
    echo ""
    echo "     [--helm|--tiller]      -- deploys secure Helm"
    echo "     [--cf|--scf|--eirini]  -- deploys Cloud Foundry/Eirini"
    echo "     [--cf-operator]        -- deploys only CF Operator"
    echo "     [--kpack]              -- deploys kpack to build images with buildpacks"
    echo "     [--tekton]             -- deploys Tekton CD"
    echo "     [--knative]            -- deploys Knative Serving/Eventing/Istio"
    echo "     [--rio]                -- deploys Rancher Rio"
    # echo "     [--knative-addr-name name] -- map GCP address to ingress gateway"
    echo "     [--kubeapp]                -- deploys Kubeapps"
    echo "     [--service-catalog|--sc]   -- deploys Helm/Service Catalog"
    echo "     [--cf-broker]              -- deploys Helm/Service Catalog/Cloud Foundry Service Broker"
    echo ""
    echo "  down                        -- destroys cluster, if originally bootstrapped"
    echo "  clean                       -- cleans up cached state files"
}

# Ordered list of available systems
# TODO: would be nice to discover available systems from bin/bootstrap-system-* and discover dependencies
_available_systems() {
  echo "helm
    kubeapps
    servicecatalog cf-broker
    cf-operator scf
    kpack tekton knative
    rio"
}

# Ordered list of requested systems
_requested_systems() {
  for available in $(_available_systems); do
    for requested in $(find state/systems/* -print0 | xargs -0 basename); do
      [[ "$available" == "$requested" && $(cat "state/systems/${requested}") == "1" ]] && { echo "$requested"; }
    done
  done
}

failfast() {
  set +e
  errors_file=$(mktemp)
  trap "rm -f ${errors_file}" EXIT

  [[ "$(command -v kubectl)X" == "X" ]] && { echo "ERROR: missing 'kubectl' CLI from \$PATH" >> $errors_file; }

  [[ -f state/infrastructure ]] && { bin/bootstrap-infrastructure-"$(cat state/infrastructure)" failfast "$errors_file"; }

  for system in $(_requested_systems); do
    "bin/bootstrap-system-$system" failfast "$errors_file"
  done

  cat "${errors_file}"
  [[ -n "$(cat "${errors_file}")" ]] && { exit 1; }
  set -e

}

up() {
  failfast

  [[ -f state/infrastructure ]] && { bin/bootstrap-infrastructure-"$(cat state/infrastructure)" up; }

  for system in $(_requested_systems); do
    "bin/bootstrap-system-$system" up
  done
}

down() {
  [[ -f state/infrastructure ]] && { bin/bootstrap-infrastructure-"$(cat state/infrastructure)" down; }
}

clean() {
  down
  rm -rf state
}

case "${1:-usage}" in
  up)
    mkdir -p state/systems state/configuration/
    shift
    while [[ $# -gt 0 ]]; do
      case "${1:-}" in
        --gke|--google)
          echo "google" > state/infrastructure
          ;;
        # --cfcontainers)
        # Is this section really for Diego for SCF?
        #   echo 1 > state/systems/cfcontainers
        #   echo 1 > state/systems/helm
        #   ;;
        --cf|--scf|--eirini)
          echo 1 > state/systems/helm
          echo 1 > state/systems/cf-operator
          echo 1 > state/systems/scf
          ;;
        --cf-operator)
          echo 1 > state/systems/helm
          echo 1 > state/systems/cf-operator
          ;;
        --kpack)
          echo 1 > state/systems/kpack
          ;;
        --tekton)
          echo 1 > state/systems/tekton
          ;;
        --knative)
          echo 1 > state/systems/knative
          ;;
        --rio)
          echo 1 > state/systems/rio
          ;;
        # --knative-addr-name)
        #   shift
        #   echo "$1" > state/configuration/knative-knative_addr_name
        #   ;;
        --helm|--tiller)
          echo 1 > state/systems/helm
          ;;
        --service-catalog|--sc)
          echo 1 > state/systems/helm
          echo 1 > state/systems/servicecatalog
          ;;
        --cf-broker)
          echo 1 > state/systems/helm
          echo 1 > state/systems/servicecatalog
          echo 1 > state/systems/cf-broker
          ;;
        --kubeapps)
          echo 1 > state/systems/helm
          echo 1 > state/systems/kubeapps
          ;;
        --credhub-store)
          shift
          echo "$1" > state/configuration/credhub-base-path
          ;;
      esac
      shift
    done

    up
    ;;

  clean)
    shift
    clean
    ;;

  failfast)
    shift
    failfast
    ;;

  down)
    shift
    down
    ;;

  *)
    usage
    exit 1
    ;;
esac
