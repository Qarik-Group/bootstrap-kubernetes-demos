#!/bin/bash

set -eu

cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

_system_domain() {
  [[ -f state/configuration/kubecf-system-domain ]] || {
    if [[ -f state/configuration/ingress-domain ]]; then
      cp state/configuration/ingress-domain state/configuration/kubecf-system-domain
    else
    echo "${CF_SYSTEM_DOMAIN:-kubecf.dev}" > state/configuration/kubecf-system-domain
    fi
  }
  cat state/configuration/kubecf-system-domain
}

_namespace() {
  [[ -f state/configuration/kubecf-namespace ]] || {
    echo "${CF_NAMESPACE:-kubecf}" > state/configuration/kubecf-namespace
  }
  cat state/configuration/kubecf-namespace
}

_default_version() {
  grep "kubecf" .versions | cut -d= -f2
}

_values_file() {
  mkdir -p state/configuration/kubecf
  printf "state/configuration/kubecf/values.yaml"
}

discover_versions() {
  # Install latest from CI/S3 bucket by default
  # Usage: KUBECF_RELEASE_URL=path/to/kubecf/bazel-bin/deploy/helm/kubecf/kubecf-3.0.0.tgz
  : "${KUBECF_RELEASE_URL:=}"
}

failfast() {
  # aws cli not current required for all code paths
  # [[ "$(command -v aws)X" != "X" ]] || { echo "ERROR: missing 'aws' CLI so we can look up latest kubecf release from S3 bucket" >> $1; }
  printf ""
}

up() {
  discover_versions
  failfast
  echo "Install Cloud Foundry/Eirini (kubecf) for $(_system_domain)"
  [[ "${KUBECF_RELEASE_URL:-X}" == "X" ]] && {
    KUBECF_RELEASE_URL="https://github.com/SUSE/kubecf/releases/download/v$(_default_version)/kubecf-$(_default_version).tgz"
  }
  [[ -f $(_values_file) ]] || {
    echo "Creating initial $(_values_file)"
    mkdir -p state/configuration/kubecf
    cat > state/configuration/kubecf/values.yaml <<YAML
system_domain: $(_system_domain)

features:
  eirini:
    enabled: true
  ingress:
    enabled: true

services:
  router:
    externalIPs: []
  ssh-proxy:
    externalIPs: []
  tcp-router:
    externalIPs: []

kube:
  pod_cluster_ip_range: 0.0.0.0/0
  service_cluster_ip_range: 0.0.0.0/0
YAML
  }

  echo "--> Using ${KUBECF_RELEASE_URL}"
  ns=$(_namespace)
  values_file=$(_values_file)
  (
    set -x
    helm upgrade --install --namespace "$ns" \
      kubecf \
      "$KUBECF_RELEASE_URL" \
      --values $values_file
  )

  echo "Upgrade buildpacks"
  helm repo add starkandwayne https://helm.starkandwayne.com
  helm repo update

  (
    set -x
    helm upgrade --install --namespace  "$ns" \
      update-all-cf-buildpacks \
      starkandwayne/update-all-cf-buildpacks
  )
}

login() {
  printf "Fetching system domain... "
  SYSTEM_DOMAIN=$(kubectl get secret kubecf.var-system-domain -ojsonpath='{.data.value}' | base64 --decode)
  echo "$SYSTEM_DOMAIN"

  printf "Fetching admin password... "
  ADMIN_PASSWORD=$(kubectl get secret kubecf.var-cf-admin-password -ojsonpath='{.data.password}' | base64 --decode)
  echo "done."
  echo

  echo "+ cf login -a https://api.$SYSTEM_DOMAIN --skip-ssl-validation -u admin -p [redacted]"
  echo
  cf login -a https://api.$SYSTEM_DOMAIN --skip-ssl-validation -u admin -p $ADMIN_PASSWORD
}

case "${1:-usage}" in
  failfast)
    shift
    failfast "$@"
    ;;

  up)
    shift
    up
    ;;

  login)
    shift
    login
    ;;

  *)
    ;;
esac
