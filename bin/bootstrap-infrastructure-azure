#!/bin/bash

# Infos
# https://github.com/SUSE/scf/wiki/How-to-Install-SCF#requirements-for-kubernetes
# https://documentation.suse.com/suse-cap/1/html/cap-guides/cha-cap-depl-aks.html 


set -eu
echo ' make sure you have "az" "kubectl" "jq" "cf" "curl" and "sed" installed! '
echo ' The azure user need the following directory role "Application Developer" or "Application Administrator" '
echo ' use az login and pick the wanted sub. '
echo ' _____________________________________________________________________________________________'
cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

_cluster_name() {
  echo "${CLUSTER_NAME:="$(whoami)-dev"}"
}

_setup_env() {
  export SUBSCRIPTION_ID="${SUBSCRIPTION_ID:-$(az account show --query '{ subscription_id: id }' -o tsv)}"
  #export PROJECT_NAME="${PROJECT_NAME:-$(gcloud config get-value core/project)}"
  export RG_NAME="rsg-name"
  export AKS_NAME="clusername"
  export REGION="westeurope"
  export NODE_COUNT="3"
  export NODE_VM_SIZE="Standard_DS4_v2" #this size is recommended by suse
  #export NODE_VM_SIZE="Standard_A2m_v2"
  export SSH_KEY_VALUE="~/.ssh/id_rsa.pub"
  export ADMIN_USERNAME="scf-admin"
  export NODEPOOL_NAME="mypool"
  export K8S_VERSION="1.15.4"
  export additional_flags=""
}

failfast() {
  [[ "$(command -v az)X" != "X" ]] || {
    echo "ERROR: missing 'az' CLI from \$PATH" >> $1
  }

  [[ -f state/configuration/credhub-base-path ]] && {
    CREDHUB_BASE_PATH=$(cat state/configuration/credhub-base-path)
    echo "Testing access to Credhub ${CREDHUB_BASE_PATH}..."
    credhub find -n "${CREDHUB_BASE_PATH}" > /dev/null
  }
}

up() {
  _setup_env
  az account set --subscription $SUBSCRIPTION_ID
  echo 'Verify that the Microsoft.Network, Microsoft.Storage, Microsoft.Compute, and Microsoft.ContainerService providers are enabled:'
  az provider list | egrep --word-regexp 'Microsoft.Network|Microsoft.Storage|Microsoft.Compute|Microsoft.ContainerService'
  az group create --name $RG_NAME --location $REGION
  echo "Creating AKS cluster..."
  additional_flags="${additional_flags} --ssh-key-value ${SSH_KEY_VALUE}" 
  additional_flags="${additional_flags} --verbose"     
  az aks create --resource-group ${RG_NAME} --name ${AKS_NAME} \
    --node-count ${NODE_COUNT} --admin-username ${ADMIN_USERNAME} \
    --node-vm-size ${NODE_VM_SIZE} \
    --node-osdisk-size=80 --nodepool-name ${NODEPOOL_NAME} \
    --kubernetes-version ${K8S_VERSION} \
    ${additional_flags}
  
  az aks wait -g ${RG_NAME} -n ${AKS_NAME} --exists --interval 2 --timeout 900


  echo "- Update nodes to support cgroup swap accounting..."
  export MC_RG_NAME=$(az aks show --resource-group $RG_NAME --name $AKS_NAME --query nodeResourceGroup --output json | jq -r '.')
  export VM_NODES=$(az vm list --resource-group $MC_RG_NAME --output json | jq -r '.[] | select (.tags.poolName | contains("'$NODEPOOL_NAME'")) | .name')
  for i in $VM_NODES
  do
     az vm run-command invoke --resource-group $MC_RG_NAME --name $i --command-id RunShellScript --scripts \
     "sudo sed --in-place --regexp-extended 's|^(GRUB_CMDLINE_LINUX_DEFAULT=)\"(.*.)\"|\1\"\2 swapaccount=1\"|' \
     /etc/default/grub.d/50-cloudimg-settings.cfg && sudo update-grub"
      az vm restart --resource-group $MC_RG_NAME --name $i
  done

  az aks get-credentials --resource-group $RG_NAME --name $AKS_NAME
  #./bin/kube-ready-state-check.sh Check cluster for SCF
  }


describe() {
  _setup_env
  az aks list --resource-group $RG_NAME --subscription $SUBSCRIPTION_ID
}

down() {
  _setup_env
  echo 'delete the aks cluster....'
  az aks delete --resource-group $RG_NAME --name $AKS_NAME --verbose
}

sus() {
  _setup_env
  echo 'supend the aks cluster vms....'
  export MC_RG_NAME=$(az aks show --resource-group $RG_NAME --name $AKS_NAME --query nodeResourceGroup --output json | jq -r '.')
  export VM_NODES=$(az vm list --resource-group $MC_RG_NAME --output json | jq -r '.[] | select (.tags.poolName | contains("'$NODEPOOL_NAME'")) | .name')
  for i in $VM_NODES
  do
      echo $i
      az vm deallocate --resource-group $MC_RG_NAME --name $i --verbose
  done
}

repl() {
  _setup_env
  echo 'resume the aks cluster vms....'
  export MC_RG_NAME=$(az aks show --resource-group $RG_NAME --name $AKS_NAME --query nodeResourceGroup --output json | jq -r '.')
  export VM_NODES=$(az vm list --resource-group $MC_RG_NAME --output json | jq -r '.[] | select (.tags.poolName | contains("'$NODEPOOL_NAME'")) | .name')
  for i in $VM_NODES
  do
      echo $i
      az vm start --resource-group $MC_RG_NAME --name $i --verbose
  done
}

case "${1:-usage}" in
  failfast)
    shift
    failfast "$@"
    ;;

  up)
    shift
    up
    ;;

  describe)
    shift
    describe
    ;;

  down)
    shift
    down
    ;;

  sus)
    shift  
    sus
    ;;

  repl)
    shift  
    repl
    ;;

  *)
    ;;
esac
