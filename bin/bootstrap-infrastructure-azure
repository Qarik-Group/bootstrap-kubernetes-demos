#!/bin/bash

# Infos
# https://github.com/SUSE/scf/wiki/How-to-Install-SCF#requirements-for-kubernetes
# https://documentation.suse.com/suse-cap/1/html/cap-guides/cha-cap-depl-aks.html 

set -eu

cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

state_dir=state/azure
mkdir -p $state_dir

_cluster_name() {
  [[ -f $state_dir/cluster-name ]] || {
    : ${CLUSTER_NAME:="$(whoami)-$(LC_ALL=C tr -dc 'a-z0-9' </dev/urandom | head -c 6)"}
    echo "$CLUSTER_NAME" > $state_dir/cluster-name
  }
  cat $state_dir/cluster-name
}

_resource_group_name() {
  _cluster_name
}

_setup_env() {
  export SUBSCRIPTION_ID="${SUBSCRIPTION_ID:-$(az account show --query '{ subscription_id: id }' -o tsv)}"
  export AKS_NAME=$(_cluster_name)
  export RG_NAME=$(_resource_group_name)
  [[ -z "${CLUSTER_REGION:-}" && -z $(az configure -l | jq -r 'map(select(.name == "location"))[0].value // ""') ]] && {
    echo "Please set a default AKS cluster region or provide \$CLUSTER_REGION"
    echo "--> az configure --defaults location=westus2"
    echo
    echo "To see a list of available region locations for AKS:"
    echo "--> az aks get-versions -l showme"
    exit 1
  }
  az aks get-versions > /dev/null
  export NODE_COUNT=${NODE_COUNT:-3}

  # https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes-general
  #export NODE_VM_SIZE="Standard_DS4_v2" #this size is recommended by suse
  # Standard_A2m_v2 - 2 cpu, 16G ram, 20G temp storage, 20.6c USD in westus2
  export NODE_VM_SIZE=${NODE_VM_SIZE:-Standard_A2m_v2}

  export ADMIN_USERNAME=${ADMIN_USERNAME:-bootstrap-admin}
  # export NODEPOOL_NAME=${NODEPOOL_NAME:-mypool}

  export K8S_VERSION=${K8S_VERSION:-$(az aks get-versions ${CLUSTER_REGION:+-l "$CLUSTER_REGION"} | jq -r ".orchestrators | last | .orchestratorVersion")}
}

failfast() {
  [[ "$(command -v az)X" != "X" ]] || {
    echo "ERROR: missing 'az' CLI from \$PATH" >> $1
  }

  [[ -f state/configuration/credhub-base-path ]] && {
    CREDHUB_BASE_PATH=$(cat state/configuration/credhub-base-path)
    echo "Testing access to Credhub ${CREDHUB_BASE_PATH}..."
    credhub find -n "${CREDHUB_BASE_PATH}" > /dev/null
  }
}

clusterJSON() {
  az aks list | jq -r --arg name "$AKS_NAME" '. | map(select(.name == $name))[0]'
}

clusterProvisioningState() {
  clusterJSON | jq -r '.provisioningState // ""'
}

up() {
  _setup_env

  [[ -z "$(clusterProvisioningState)" ]] && {
    az account set --subscription "$SUBSCRIPTION_ID"
    echo 'Verify that the Microsoft.Network, Microsoft.Storage, Microsoft.Compute, and Microsoft.ContainerService providers are enabled:'
    provider_json=$(az provider list -o json)
    required_namespaces=(Microsoft.Network Microsoft.Storage Microsoft.Compute Microsoft.ContainerService)
    for namespace in "${required_namespaces[@]}"; do
      status=$(echo "$provider_json" | jq -r --arg namespace "$namespace" '. | map(select(.namespace == $namespace))[0].registrationState // ""')
      echo "--> $namespace: $status"
      [[ "${status}" == "Registered" ]] || {
        echo "    Registering..."
        az provider register --namespace "$namespace"
      }
    done

    echo "Creating Azure Resource Group..."
    az group create \
      --name "$RG_NAME" \
      --output table \
      ${CLUSTER_REGION:+--location "$CLUSTER_REGION"}

    echo "Creating AKS cluster..."
    az aks create \
      --resource-group "${RG_NAME}" \
      --name "${AKS_NAME}" \
      --node-count ${NODE_COUNT} \
      --admin-username ${ADMIN_USERNAME} \
      --node-vm-size ${NODE_VM_SIZE} \
      --node-osdisk-size=80 \
      ${NODEPOOL_NAME:+--nodepool-name "$NODEPOOL_NAME"} \
      ${K8S_VERSION:+--kubernetes-version "$K8S_VERSION"} \
      ${DEBUG:+--verbose} \
      ${SSH_KEY_VALUE:+ --ssh-key-value "$SSH_KEY_VALUE"}
  }

  az aks wait -g "${RG_NAME}" -n "${AKS_NAME}" --created --interval 2 --timeout 900

  echo "Current AKS clusters:"
  az aks list -o table

  [[ "${cfcontainers:-}" == "1" ]] && {
    echo "- Update nodes to support cgroup swap accounting..."
    MC_RG_NAME=$(az aks show --resource-group "$RG_NAME" --name $AKS_NAME --query nodeResourceGroup --output json | jq -r '.')
    VM_NODES=$(az vm list --resource-group "$MC_RG_NAME" --output json | jq -r '.[] | select (.tags.poolName | contains("'$NODEPOOL_NAME'")) | .name')
    for i in $VM_NODES
    do
      az vm run-command invoke --resource-group "$MC_RG_NAME" --name "$i" --command-id RunShellScript --scripts \
      "sudo sed --in-place --regexp-extended 's|^(GRUB_CMDLINE_LINUX_DEFAULT=)\"(.*.)\"|\1\"\2 swapaccount=1\"|' \
      /etc/default/grub.d/50-cloudimg-settings.cfg && sudo update-grub"
        az vm restart --resource-group "$MC_RG_NAME" --name "$i"
    done
  }

  echo "Get credentials..."
  az aks get-credentials --resource-group $RG_NAME --name $AKS_NAME

  echo "Current Kubernetes nodes:"
  kubectl get nodes
}

describe() {
  _setup_env
  az aks list --resource-group $RG_NAME --subscription "$SUBSCRIPTION_ID"
}

down() {
  echo 'Deleting the AKS cluster and resource group....'
  az group delete --name "$(_resource_group_name)" --verbose
}

case "${1:-usage}" in
  failfast)
    shift
    failfast "$@"
    ;;

  up)
    shift
    up
    ;;

  describe)
    shift
    describe
    ;;

  down)
    shift
    down
    ;;

  *)
    ;;
esac
