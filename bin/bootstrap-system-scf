#!/bin/bash

set -eu

cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

_system_domain() {
  [[ -f state/configuration/scf-system-domain ]] || {
    echo "${CF_SYSTEM_DOMAIN:-scf.suse.dev}" > state/configuration/scf-system-domain
  }
  cat state/configuration/scf-system-domain
}

_namespace() {
  [[ -f state/configuration/scf-namespace ]] || {
    echo "${CF_NAMESPACE:-scf}" > state/configuration/scf-namespace
  }
  cat state/configuration/scf-namespace
}

_default_helm_file_version() {
  grep "scf-helm-file" .versions | cut -d= -f2
}

discover_versions() {
  export SCF_RELEASE_FILE=${SCF_RELEASE_FILE:-$(_default_helm_file_version)}

  # Install latest from CI/S3 bucket by default
  # Usage: SCF_RELEASE_URL=path/to/scf/bazel-bin/deploy/helm/scf/scf-3.0.0.tgz
  : "${SCF_RELEASE_URL:=}"
}

failfast() {
  # aws cli not current required for all code paths
  # [[ "$(command -v aws)X" != "X" ]] || { echo "ERROR: missing 'aws' CLI so we can look up latest scf release from S3 bucket" >> $1; }
  printf ""
}

up() {
  discover_versions
  failfast
  echo "Install Cloud Foundry/Eirini (scf) for $(_system_domain)"
  [[ "${SCF_RELEASE_URL:-X}" == "X" ]] && {
    # Try to look up its date from s3 bucket, if aws CLI available and configured
    [[ "$(command -v aws)X" != "X" && -f ~/.aws/credentials ]] && {
      scf_release_date=$(aws s3 ls s3://scf-v3/ | grep "$SCF_RELEASE_FILE" | awk '{print $1}')
    }
    echo "--> Using ${SCF_RELEASE_FILE}${scf_release_date:+ from ${scf_release_date}}"
    SCF_RELEASE_URL="https://scf-v3.s3.amazonaws.com/${SCF_RELEASE_FILE}"
  }
  helm upgrade --install --namespace "$(_namespace)" \
    scf \
    "$SCF_RELEASE_URL" \
    --set "system_domain=$(_system_domain)" \
    --set "features.eirini=true"

  echo "Upgrade buildpacks"
  helm repo add starkandwayne https://helm.starkandwayne.com
  helm repo update

  helm upgrade --install --namespace  "$(_namespace)" \
    update-all-cf-buildpacks \
    starkandwayne/update-all-cf-buildpacks
}

kwt_routing() {
  [[ "$(command -v kwt)X" != "X" ]] || { echo "ERROR: install 'kwt'"; exit 1; }

  api_ip=$(kubectl get svc -n "$(_namespace)" scf-router-0 --template '{{.spec.clusterIP}}')

  echo "Mapping *.$(_system_domain) to internal IP ${api_ip}..."
  echo
  echo "Login with:"
  echo "cf login -a https://api.$(_system_domain) --skip-ssl-validation -u admin \\"
  echo '   -p "$(kubectl get secret -n scf scf.var-cf-admin-password -o json | jq -r .data.password | base64 -D)"'
  echo
  system_domain=$(_system_domain)
  namespace=$(_namespace)
  set -x
  sudo -E kwt net start --dns-map "${system_domain}=${api_ip}" --namespace "$namespace"
}

case "${1:-usage}" in
  failfast)
    shift
    failfast "$@"
    ;;

  up)
    shift
    up
    ;;

  kwt)
    shift
    kwt_routing
    ;;

  *)
    ;;
esac
